swagger: "2.0"
info:
  version: 1.0.0
  title: Elektronicke dalnicni znamky API
host: virtserver.swaggerhub.com
basePath: /Jiri_Jerabek/Elektronicke-dalnicni-znamky/1.0.0
tags:
- name: Vignettes
- name: VignetteTypes
- name: Users
- name: Auth
- name: Statistics
schemes:
- https
paths:
  /vignettes/{license_plate}:
    get:
      tags:
      - Vignettes
      summary: get active vignette if exists
      operationId: getVignette
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: license_plate
        in: path
        description: license plate
        required: true
        type: string
      responses:
        "200":
          description: vignette object
          schema:
            properties:
              vignette:
                $ref: '#/definitions/Vignette'
        "404":
          description: Vignette not found
          schema:
            $ref: '#/definitions/VignetteNotFound'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/ServerError'
  /vignettes/{license_plate}/validate:
    get:
      tags:
      - Vignettes
      summary: Validate vignettes
      operationId: validateVignette
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: license_plate
        in: path
        description: license plate
        required: true
        type: string
      responses:
        "200":
          description: Vignette validation
          schema:
            properties:
              valid:
                type: boolean
              vignette:
                $ref: '#/definitions/Vignette'
        "404":
          description: Vignette not found
          schema:
            $ref: '#/definitions/VignetteNotFound'
        "500":
          description: INTERNAL_SERVER_ERROR
  /vignettes/{license_plate}/quick-buy:
    post:
      tags:
      - Vignettes
      summary: Quick buy vignette w/o auth (no user)
      operationId: quickbuyVignette
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: license_plate
        in: path
        description: license plate
        required: true
        type: integer
      - in: body
        name: quickBuyVignette
        required: false
        schema:
          $ref: '#/definitions/quickBuyVignette'
      responses:
        "201":
          description: viggnette successfully bought
        "404":
          description: VIGNETTE_NOT_FOUND
        "500":
          description: INTERNAL_SERVER_ERROR
  /vignettes/{license_plate}/buy:
    post:
      tags:
      - Vignettes
      summary: buy vignette (auth)
      operationId: buyVignette
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: license_plate
        in: path
        description: license plate
        required: true
        type: integer
      - in: body
        name: buyVignette
        required: false
        schema:
          $ref: '#/definitions/buyVignette'
      responses:
        "201":
          description: viggnette successfully bought
        "404":
          description: VIGNETTE_NOT_FOUND
        "500":
          description: INTERNAL_SERVER_ERROR
  /vignettes/{vignette_id}/extend:
    post:
      tags:
      - Vignettes
      summary: Extend validity vignette
      operationId: extendValidityVignette
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: vignette_id
        in: path
        description: license plate
        required: true
        type: integer
      - in: body
        name: daysExtend
        required: false
        schema:
          $ref: '#/definitions/daysExtend'
      responses:
        "201":
          description: viggnette successfully extended
          schema:
            $ref: '#/definitions/Vignette'
        "404":
          description: VIGNETTE_NOT_FOUND
        "500":
          description: INTERNAL_SERVER_ERROR
  /vignettes/{vignette_id}/delay:
    post:
      tags:
      - Vignettes
      summary: delays vignette start date
      description: delays vignette start date
      operationId: delayVignette
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: vignette_id
        in: path
        required: true
        type: string
      - in: body
        name: delayTime
        description: delayed days in form of date
        required: false
        schema:
          $ref: '#/definitions/delayTime'
      responses:
        "200":
          description: Vignette delayed successfully
          schema:
            $ref: '#/definitions/Vignette'
        "404":
          description: Vignette not found
        "500":
          description: internal server error
  /vignettes/{vignette_id}/remove:
    delete:
      tags:
      - Vignettes
      summary: remove Vignette from the database
      description: Remove Vignette from the database
      operationId: removeVignette
      produces:
      - application/json
      parameters:
      - name: vignette_id
        in: path
        description: vignette id to delete
        required: true
        type: integer
      responses:
        "200":
          description: sucessfully removed
        "404":
          description: vignette not found
          schema:
            $ref: '#/definitions/VignetteNotFound'
      security:
      - Bearer: []
  /vignettes/{license_plate}/history:
    get:
      tags:
      - Vignettes
      summary: get vignettes history
      description: get vignettes history
      operationId: getHistoryVignette
      produces:
      - application/json
      parameters: []
      responses:
        "200":
          description: history of user vignettes
          schema: {}
        "404":
          description: vignette not found
          schema:
            $ref: '#/definitions/VignetteNotFound'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/ServerError'
  /users/{user_id}/vignettes:
    get:
      tags:
      - Users
      summary: User's owned vignettes (Prohlížení známek)
      operationId: getUserVignettes
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: user_id
        in: path
        required: true
        type: integer
      responses:
        "200":
          description: user's vignettes
          schema: {}
        "401":
          description: no auth
          schema:
            $ref: '#/definitions/AuthError'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/ServerError'
      security:
      - Bearer: []
  /users/{user_id}:
    get:
      tags:
      - Users
      summary: get User
      operationId: getUser
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: user_id
        in: path
        required: true
        type: integer
      responses:
        "200":
          description: user
          schema: {}
        "401":
          description: no auth
          schema:
            $ref: '#/definitions/AuthError'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/ServerError'
    patch:
      tags:
      - Users
      summary: edit user
      operationId: editUser
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: user_id
        in: path
        required: true
        type: integer
      - in: body
        name: user
        required: false
        schema:
          $ref: '#/definitions/User'
      responses:
        "200":
          description: user's vignettes
          schema: {}
        "401":
          description: auth error
          schema:
            $ref: '#/definitions/AuthError'
        "404":
          description: user not found
          schema:
            $ref: '#/definitions/UserNotFound'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/ServerError'
  /auth/registration:
    post:
      tags:
      - Auth
      summary: register user
      operationId: registerUser
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: registration
        required: true
        schema:
          $ref: '#/definitions/RegistrationCredentials'
      responses:
        "200":
          description: user's vignettes
          schema:
            $ref: '#/definitions/inline_response_200'
        "401":
          description: auth error
          schema:
            $ref: '#/definitions/AuthError'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/ServerError'
  /auth/login:
    post:
      tags:
      - Auth
      summary: login user
      operationId: loginUser
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/LoginCredentials'
      responses:
        "200":
          description: user's vignettes
          schema:
            $ref: '#/definitions/inline_response_200'
        "401":
          description: auth error
          schema:
            $ref: '#/definitions/AuthError'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/ServerError'
  /auth/logout:
    get:
      tags:
      - Auth
      summary: logout user
      operationId: logoutUser
      consumes:
      - application/json
      produces:
      - application/json
      parameters: []
      responses:
        "200":
          description: logout successfull
        "401":
          description: auth error
          schema:
            $ref: '#/definitions/AuthError'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/ServerError'
  /statistics:
    get:
      tags:
      - Statistics
      summary: statistics
      operationId: statistics
      consumes:
      - application/json
      produces:
      - application/json
      parameters: []
      responses:
        "200":
          description: get count statistics valid, sold, active
          schema:
            $ref: '#/definitions/inline_response_200_1'
        "401":
          description: auth error
          schema:
            $ref: '#/definitions/AuthError'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/ServerError'
      security:
      - Bearer: []
  /users/{user_id}/vignettes/edit:
    patch:
      tags:
      - Users
      summary: edits user vignette
      description: ADMIN ROLE ONLY
      operationId: editUserVignette
      produces:
      - application/json
      parameters:
      - name: user_id
        in: path
        description: ID of user whose Vignette is going to be edited
        required: true
        type: integer
      responses:
        "200":
          description: returns modified user vignete
          schema:
            $ref: '#/definitions/Vignette'
        "404":
          description: user not found
          schema:
            $ref: '#/definitions/VignetteNotFound'
      security:
      - Bearer: []
  /vignettes/types:
    get:
      tags:
      - VignetteTypes
      summary: get vignette types
      operationId: getVignetteType
      produces:
      - application/json
      parameters: []
      responses:
        "200":
          description: returns vignette types
          schema:
            items:
              $ref: '#/definitions/VignetteType'
        "404":
          description: vignette types not found
          schema:
            $ref: '#/definitions/VignetteNotFound'
    patch:
      tags:
      - VignetteTypes
      summary: edit vignette type params
      description: Editting vignette's type
      operationId: editVignetteType
      produces:
      - application/json
      parameters:
      - in: body
        name: editedVignetteType
        description: delayed days in form of date
        required: false
        schema:
          $ref: '#/definitions/editedVignetteType'
      responses:
        "200":
          description: returns vignette types
          schema:
            items:
              $ref: '#/definitions/VignetteType'
        "404":
          description: vignette type not found
          schema:
            $ref: '#/definitions/VignetteNotFound'
      security:
      - Bearer: []
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
definitions:
  Vignette:
    type: object
    properties:
      vignetteId:
        type: integer
      licensePlate:
        type: string
      serialNumber:
        type: integer
      vignetteType:
        $ref: '#/definitions/VignetteType'
      userId:
        type: integer
      validFrom:
        type: string
        format: date
  User:
    type: object
    properties:
      userId:
        type: integer
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      phone:
        type: string
      role:
        $ref: '#/definitions/Role'
  RegistrationCredentials:
    type: object
    properties:
      email:
        type: string
      password:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      phone:
        type: string
  VignetteNotFound:
    type: object
    properties:
      error:
        type: string
        default: VIGNETTE_NOT_FOUND
      message:
        type: string
      timestamp:
        type: string
        format: datetime
  AuthError:
    type: object
    properties:
      error:
        type: string
        default: AUTH_ERROR
      message:
        type: string
  ServerError:
    type: object
    properties:
      error:
        type: string
        default: SERVER_ERROR
      message:
        type: string
  UserNotFound:
    type: object
    properties:
      error:
        type: string
        default: USER_NOT_FOUND
      message:
        type: string
  LoginCredentials:
    type: object
    properties:
      email:
        type: string
      password:
        type: string
  VignetteType:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      display_name:
        type: string
      price:
        type: integer
      duration:
        type: string
        format: time
        example: 10 00:00:00
  quickBuyVignette:
    type: object
    properties:
      id_vignette_type:
        type: integer
      valid_from:
        type: string
        format: date-time
  buyVignette:
    type: object
    properties:
      id_vignette_type:
        type: integer
      id_user:
        type: integer
      valid_from:
        type: string
        format: date-time
  daysExtend:
    type: object
    properties:
      id_vignette_type:
        type: integer
  delayTime:
    type: object
    properties:
      delayDate:
        type: string
        format: date
  inline_response_200:
    type: object
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
  inline_response_200_1:
    type: object
    properties:
      valid:
        type: object
        properties: {}
      invalid:
        type: object
        properties: {}
      sold:
        type: object
        properties: {}
      active:
        type: object
        properties: {}
  editedVignetteType:
    type: object
    properties:
      name:
        type: string
        example: 10denni
      display_name:
        type: string
        example: 10ti denní
      price:
        type: number
        example: 310.0
      duration:
        type: string
        example: 10 00:00:00
  Role:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string